<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2021/04/21/Initial-Server-Setup-with-Ubuntu/</url>
    <content><![CDATA[<p>title: Initial Server Setup with Ubuntu<br>tags: [技术,linux,ubuntu]<br>categories: </p>
<ul>
<li>linux</li>
<li>ubuntu<br>date: 2021-04-21 15:21:12</li>
</ul>
<h1 id="Initial-Server-Setup-with-Ubuntu"><a href="#Initial-Server-Setup-with-Ubuntu" class="headerlink" title="Initial Server Setup with Ubuntu"></a>Initial Server Setup with Ubuntu</h1><ul>
<li>When you first create a new ubuntu 18.04 server, there are a new configuration steps that you should take early on as part of the basic setup. This will increase the security and usability of your server and will give you a solid foundation for subsequent actions.</li>
<li>This guide below demonstrates how to manually complete the steps recommended for new ubuntu 18.04 servers. Following this procedure manually can be useful to learn some basic system administration skills and as an exercise to fully understand the actions being taking on my server. As an alternative, if you wish to get up and running more quickly, you can run my initial server setup script which automates these steps.<h4 id="step-1-logging-in-as-root"><a href="#step-1-logging-in-as-root" class="headerlink" title="step 1 logging in as root"></a>step 1 logging in as root</h4></li>
<li>If you are not already connected to your server, go ahead and log in as root user using the following command, substitute server’s ip with your server’s public ip address.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@server&#39;s ip</span><br></pre></td></tr></table></figure></li>
<li>Accept the warning about host authenticity if it appears. If you are using password authentication, provide your root password to login in. If you are using an SSH key that is passphrase protected, you may be prompted to enter the passphrase the first time you use the key each session. If this is your first time logging into the server with a password, you may also be prompted to change the root password.</li>
<li><strong>about root</strong><blockquote>
<p>The root user is the administrative user in a Linux environment that has very broad privileges. Because of the heightened privileges of the root account, you are discouraged form using it on a regular basis. This is because part of the power inherent with the root account is the ability to make very destructive changes, even by accident.</p>
<p>The next step is to set up an alternative user account with a reduced scope of influence for day-to-day work. I will teach you how to gain increased privileges during the times when you need them.</p>
</blockquote>
</li>
</ul>
<h4 id="step2-creating-a-new-user"><a href="#step2-creating-a-new-user" class="headerlink" title="step2 creating a new user"></a>step2 creating a new user</h4><ul>
<li>Once you are logged in as root, we are prepared to add the new user account that we will use to log in from now on.</li>
<li>This example create a new user named wenyao<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser wenyao</span><br></pre></td></tr></table></figure></li>
<li>You will be asked a few questions, starting with the account password.</li>
<li>Enter a strong password and, optionally, fill in any of the additional information if you would like. This is not required and you can just hit enter to skip.</li>
</ul>
<h4 id="step3-granting-administrative-privileges"><a href="#step3-granting-administrative-privileges" class="headerlink" title="step3 granting administrative privileges"></a>step3 granting administrative privileges</h4><ul>
<li>Now, we have a new user account with regular account privileges. However, we may sometimes need to do administrative tasks.</li>
<li>To avoid having to log out of our normal user and log back in as the root account, we can set up what is known as superuser or root privileges for our normal account. This allow our normal user to run commands with administrative privileges by putting the word “sudo” before each command.</li>
<li>To add these privileges to our new user, we need add the new user to the “sudo” group. By default, on ubuntu 18.04, users who belong to the “sudo” group are allow to use the “sudo” command.</li>
<li>As root, run this command to add new user to the sudo group.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -aG sudo wenyao</span><br></pre></td></tr></table></figure></li>
<li>Now, when logged in as your regular user, you can type “sudo” before commands to perform actions with superuser privileges.</li>
</ul>
<h4 id="step4-setting-up-a-basic-firewall"><a href="#step4-setting-up-a-basic-firewall" class="headerlink" title="step4 setting up a basic firewall"></a>step4 setting up a basic firewall</h4><ul>
<li><p>ubuntu 18.04 servers can use the UFW firewall to make sure only connections to certain services are allowed. We can set up a basic firewall very easily using this application.</p>
</li>
<li><p>Different applications can register their profiles with UFW upon installation. These profiles allow UFW to manager these applications by name. OpenSSH, the service allowing us to connect to our server now, has a profile registered with UFW. You can see this by typing:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw app list</span><br></pre></td></tr></table></figure></li>
<li><p>the output will looks like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Available applications:</span><br><span class="line">  OpenSSH</span><br></pre></td></tr></table></figure></li>
<li><p>We need make sure that the firewall allows SSH connections so that we can log back in next time. We can allow these connections by typing:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw allow OpenSSH</span><br></pre></td></tr></table></figure></li>
<li><p>Afterwards, we can enable the firewall by typing:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw enable</span><br></pre></td></tr></table></figure></li>
<li><p>You can see that SSH connections are allowed by typing:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ufw status</span><br></pre></td></tr></table></figure></li>
<li><p>the output will looks like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Status: active</span><br><span class="line"></span><br><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">OpenSSH                    ALLOW       Anywhere</span><br><span class="line">OpenSSH (v6)               ALLOW       Anywhere (v6)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>As the firewall is currently blocking all connections except for SSH. If you install and configure additional services, you will need to adjust the firewall setting to allow acceptable traffic in. </p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>build a mail server for myself</title>
    <url>/2021/04/16/build-a-mail-server-for-myself/</url>
    <content><![CDATA[<h1 id="build-a-mail-server-for-myself"><a href="#build-a-mail-server-for-myself" class="headerlink" title="build a mail server for myself"></a>build a mail server for myself</h1><h2 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h2><ul>
<li>centos7.6<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4></li>
<li>解析域名添加两条记录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A 记录</span><br><span class="line">记录类型：A</span><br><span class="line">主机记录：@</span><br><span class="line">记录值：ip address</span><br><span class="line"></span><br><span class="line">MX 记录</span><br><span class="line">记录类型：MX</span><br><span class="line">主机记录：@</span><br><span class="line">记录值：我的域名</span><br></pre></td></tr></table></figure></li>
<li>生效检查</li>
</ul>
<ol>
<li>ping mydomain, 如果返回了刚刚解析的ip地址，则成功。</li>
<li>检查MX记录, nslookup -q=mx mydomain,如果返回的信息中有域名，则成功。</li>
</ol>
<h4 id="postfix"><a href="#postfix" class="headerlink" title="postfix"></a>postfix</h4><ol>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install postfix</span><br></pre></td></tr></table></figure></li>
<li>配置，参考如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postconf -e &#39;myhostname &#x3D; server.cuimouren.cn&#39;</span><br><span class="line">postconf -e &#39;mydestination &#x3D; localhost, localhost.localdomain&#39;</span><br><span class="line">postconf -e &#39;myorigin &#x3D; $mydomain&#39;</span><br><span class="line">postconf -e &#39;mynetworks &#x3D; 127.0.0.0&#x2F;8&#39;</span><br><span class="line">postconf -e &#39;inet_interfaces &#x3D; all&#39;</span><br><span class="line">postconf -e &#39;inet_protocols &#x3D; all&#39;</span><br><span class="line">postconf -e &#39;mydestination &#x3D; $myhostname, localhost.$mydomain, localhost, $mydomain&#39;</span><br><span class="line">postconf -e &#39;home_mailbox &#x3D; Maildir&#x2F;&#39;</span><br><span class="line">postconf -e &#39;smtpd_sasl_type &#x3D; dovecot&#39;</span><br><span class="line">postconf -e &#39;smtpd_sasl_path &#x3D; private&#x2F;auth&#39;</span><br><span class="line">postconf -e &#39;smtpd_sasl_auth_enable &#x3D; yes&#39;</span><br><span class="line">postconf -e &#39;broken_sasl_auth_clients &#x3D; yes&#39;</span><br><span class="line">postconf -e &#39;smtpd_sasl_authenticated_header &#x3D; yes&#39;</span><br><span class="line">postconf -e &#39;smtpd_recipient_restrictions &#x3D; permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination&#39;</span><br><span class="line">postconf -e &#39;smtpd_use_tls &#x3D; yes&#39;</span><br><span class="line">postconf -e &#39;smtpd_tls_cert_file &#x3D; &#x2F;etc&#x2F;pki&#x2F;dovecot&#x2F;certs&#x2F;dovecot.pem&#39;</span><br><span class="line">postconf -e &#39;smtpd_tls_key_file &#x3D; &#x2F;etc&#x2F;pki&#x2F;dovecot&#x2F;private&#x2F;dovecot.pem&#39;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>配置中 Postfix 使用 sasl 和 tls 来完成身份认证和传输信息加密。<br>试验中使用了 Dovecot 默认的 ssl 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。</li>
</ul>
<ol start="3">
<li>配置 smtps</li>
</ol>
<ul>
<li>部分邮件客户端依赖于使用 465 端口提供加密连接，所以我们修改配置，允许 Postfix 使用 465 端口发送邮件。打开 /etc/postfix/master.cf 文件，将如下两行前的 # 去除：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smtps inet n - n - - smtpd</span><br><span class="line">-o smtpd_tls_wrappermode&#x3D;yes</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>启动</li>
</ol>
<ul>
<li>使用以下命令，将 Postfix 设为自动启动并首次启动该服务：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable postfix.service</span><br><span class="line">systemctl start  postfix.service</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>log</li>
</ol>
<ul>
<li>Postfix 系统的日志文件在系统的这个目录下的 /var/log/maillog 文件，此文件记录了 Postfix 服务器的运行状态信息。<h4 id="dovecot"><a href="#dovecot" class="headerlink" title="dovecot"></a>dovecot</h4></li>
</ul>
<ol>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install dovecot</span><br></pre></td></tr></table></figure></li>
<li>配置</li>
</ol>
<ul>
<li>打开 /etc/dovecot/dovecot.conf 文件，在最下方加入以下配置：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssl_cert &#x3D; &lt;&#x2F;etc&#x2F;pki&#x2F;dovecot&#x2F;certs&#x2F;dovecot.pem</span><br><span class="line">ssl_key &#x3D; &lt;&#x2F;etc&#x2F;pki&#x2F;dovecot&#x2F;private&#x2F;dovecot.pem</span><br><span class="line"></span><br><span class="line">protocols &#x3D; imap pop3 lmtp</span><br><span class="line">listen &#x3D; *</span><br><span class="line">mail_location &#x3D; Maildir:~&#x2F;Maildir</span><br><span class="line">disable_plaintext_auth &#x3D; no</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>如果前面你修改为了自己的 ssl 证书和私钥，请替换开始两行配置的路径。</li>
<li>打开 /etc/dovecot/conf.d/10-master.conf 文件，找到 service auth 部分，将以下行前面的 # 去除：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unix_listener &#x2F;var&#x2F;spool&#x2F;postfix&#x2F;private&#x2F;auth &#123;  </span><br><span class="line">       mode &#x3D; 0666  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable dovecot.service</span><br><span class="line">systemctl start  dovecot.service</span><br></pre></td></tr></table></figure></li>
<li>log</li>
</ol>
<ul>
<li>查看 /var/log/maillog 是否启动成功，如下所示为成功。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jun 26 12:00:28 localhost postfix&#x2F;postfix-script[28338]: starting the Postfix mail system</span><br><span class="line">Jun 26 12:00:29 localhost postfix&#x2F;master[28340]: daemon started -- version 2.10.1, configuration &#x2F;etc&#x2F;postfix</span><br><span class="line">Jun 26 12:28:40 localhost dovecot: master: Dovecot v2.2.10 starting up for imap, pop3, lmtp (core dumps disabled)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4></li>
<li>添加用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uaeradd username</span><br></pre></td></tr></table></figure></li>
<li>设置密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure>
<h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4></li>
<li>su mailuser 切换用户</li>
<li>发送邮件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;邮件内容&quot; | mail -s &quot;邮件主题&quot;  目标邮箱</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>使用</category>
      </categories>
      <tags>
        <tag>vps</tag>
        <tag>mail</tag>
        <tag>myself</tag>
      </tags>
  </entry>
  <entry>
    <title>code-server</title>
    <url>/2021/04/21/code-server/</url>
    <content><![CDATA[<h1 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h1><ul>
<li>code-server is a cloud ide platform, which can enable us to code through browser anywhere. But how to set up the code-server on ubuntu 18.04</li>
<li>Eeee, to practice my English, I prefer to using English in my blog, unless there is something I can’t express by using my poor English.<h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><blockquote>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>技术，linux</tag>
        <tag>code-server</tag>
      </tags>
  </entry>
  <entry>
    <title>git的使用</title>
    <url>/2021/03/23/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><h2 id="创建git库"><a href="#创建git库" class="headerlink" title="创建git库"></a>创建git库</h2><h4 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir gittest</span><br><span class="line">cd gittest</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>
<h4 id="将要添加的文件加入git管理"><a href="#将要添加的文件加入git管理" class="headerlink" title="将要添加的文件加入git管理"></a>将要添加的文件加入git管理</h4><p>  <strong>add 从工作区到暂存区</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add [filename]</span><br></pre></td></tr></table></figure>
<p>或者将目录下所有文件都加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h4 id="自定义所要添加的文件"><a href="#自定义所要添加的文件" class="headerlink" title="自定义所要添加的文件"></a>自定义所要添加的文件</h4><p>总是手动add每一个太麻烦了，但总有些不希望添加进去的，可以这样。</p>
<ul>
<li>创建一个文件名为的文件<blockquote>
<p>.gitignore</p>
</blockquote>
</li>
<li>文件内容为<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file</span><br><span class="line">.*</span><br><span class="line">!.gitignore</span><br><span class="line">!file1</span><br></pre></td></tr></table></figure></li>
<li>这表示名为file的文件要加进去</li>
<li>所有文件都要加进去</li>
<li>忽略 .gitignore</li>
<li>忽略 file1</li>
</ul>
<h4 id="提交到仓库"><a href="#提交到仓库" class="headerlink" title="提交到仓库"></a>提交到仓库</h4><p><strong>commit 将暂存区提交到仓库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m [提交描述]</span><br></pre></td></tr></table></figure>
<p> <strong>每次commit之前都要add所要进行管理的文件</strong> </p>
<h4 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">简略版</span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure>
<h4 id="查看文件更改情况"><a href="#查看文件更改情况" class="headerlink" title="查看文件更改情况"></a>查看文件更改情况</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff [filename]</span><br></pre></td></tr></table></figure>

<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p><strong>在commit之后后悔了</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log </span><br><span class="line">git log --oneline &#x2F;&#x2F;简略版</span><br></pre></td></tr></table></figure>
<ul>
<li><p>使用git log 查看之前提交的记录，记下回退的版本号commit id 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard [commit id]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>注意只有在head指向的版本之前的,</strong> 切换版本到当前版本之后的 输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4></li>
<li><p>丢弃对工作区的修改 add之前</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- [filename]</span><br></pre></td></tr></table></figure></li>
<li><p><em>checkout就是用版本库里的版本替换工作区的版本</em>*</p>
</li>
<li><p>丢弃对暂存区的修改 add之后 commit之前</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset HEAD [filename]</span><br></pre></td></tr></table></figure>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h4 id="创建ssh-key"><a href="#创建ssh-key" class="headerlink" title="创建ssh key"></a>创建ssh key</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;myemail@163.com&quot;</span><br></pre></td></tr></table></figure>
<p>在用户目录里找到id_rsa.pub,将里面的数据复制到GitHub中,这样就可以从本地电脑推送到GitHub中了.</p>
<h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add repo1 git@github.com:yishuilingbo&#x2F;gittest.git</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="查看本地所有仓库"><a href="#查看本地所有仓库" class="headerlink" title="查看本地所有仓库"></a>查看本地所有仓库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<h4 id="推送到远程库"><a href="#推送到远程库" class="headerlink" title="推送到远程库"></a>推送到远程库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u [库名] [分支名]</span><br></pre></td></tr></table></figure></li>
<li><p>加上了-u参数，Git不但会把本地的分支内容推送的远程新的分支，还会把本地的分支和远程的分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<h4 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm [库名]</span><br></pre></td></tr></table></figure>
<h4 id="克隆库"><a href="#克隆库" class="headerlink" title="克隆库"></a>克隆库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:yishuilingbo&#x2F;gittest.git</span><br><span class="line">cd [库名]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h4 id="建立新的分支"><a href="#建立新的分支" class="headerlink" title="建立新的分支"></a>建立新的分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch [branchname]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git switch branch [branchname]</span><br></pre></td></tr></table></figure>
<h4 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git switch -c [branchname]</span><br></pre></td></tr></table></figure>
<h4 id="合并分支到当前分支"><a href="#合并分支到当前分支" class="headerlink" title="合并分支到当前分支"></a>合并分支到当前分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge [来源分支名]</span><br></pre></td></tr></table></figure>
<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d [branchname]</span><br></pre></td></tr></table></figure>
<ul>
<li>若该分支没有被合并过，以下强制删除<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -D [branchname]</span><br></pre></td></tr></table></figure>
<h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4></li>
<li>当两个不同的分支对同一对象进行修改并提交之后会发生 merge conflict<br>此时需要查看冲突文件手动解决冲突。<h4 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --graph</span><br></pre></td></tr></table></figure>
简洁版<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --graph --pretty&#x3D;oneline --abbrev-commit</span><br></pre></td></tr></table></figure>
<h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4>通常合并分支的时候，git会采用<strong>fast forward</strong>模式。这种模式下，git只是把分支指针向前移动，此时，删除掉分支之后将会丢失分支信息。若要强制禁止<strong>fast forward</strong>,git就会在merge的时候生成一个新的commit,这样即使删除该分支，也可以从log上查看历史信息。</li>
<li>强制禁止<strong>fast forward</strong> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge --no-ff -m [commit 描述] [来源分支名]</span><br></pre></td></tr></table></figure>
<h4 id="修复main分支上的bug流程"><a href="#修复main分支上的bug流程" class="headerlink" title="修复main分支上的bug流程"></a>修复main分支上的bug流程</h4></li>
</ul>
<ol>
<li>当前在dev分支，先保存工作现场<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure></li>
<li>切换到main分支，并建立新的分支bugfix</li>
<li>在新的分支上修改bug,然后提交后合并到main   产生一个commit id fixbug</li>
<li>回到dev分支，回复现场<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash pop  &#x2F;&#x2F;这将删除这条stash</span><br><span class="line">或者</span><br><span class="line">git stash list &#x2F;&#x2F;查看stash list</span><br><span class="line">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure></li>
<li>将修复的信息复制到当前dev分支<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git cherry-pick [commit id]</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="多人合作冲突"><a href="#多人合作冲突" class="headerlink" title="多人合作冲突"></a>多人合作冲突</h4><ol>
<li>pull 下来之后手动解决冲突在再合并push</li>
</ol>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><ol>
<li>切换到要创建标签的分支上<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag [标签名]</span><br></pre></td></tr></table></figure>
默认标签打在最新的commit上面</li>
<li>对历史commit打标签<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --pretty&#x3D;oneline --abbrev-commit  &#x2F;&#x2F;列出历史commit</span><br><span class="line">git tag [tag] [commit id]</span><br></pre></td></tr></table></figure></li>
<li>指定标签信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -a [tag] -m [info] [commit id]</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>标签总是和对应的commit挂钩</strong></p>
<h4 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">git tag -d [tag]</span><br></pre></td></tr></table></figure>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>标签只存储到本地，不会自动推送到远程，可以这样推送到远程</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">git push [库名] [tag]</span><br><span class="line">git push [库名] --tags  <span class="comment">//一次性推送所有标签</span></span><br></pre></td></tr></table></figure>
<h4 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">git push [库名] :ref/tags/[tag]</span><br></pre></td></tr></table></figure>
<h2 id="git报错"><a href="#git报错" class="headerlink" title="git报错"></a>git报错</h2><h4 id="refusing-to-merge-unrelated-histories"><a href="#refusing-to-merge-unrelated-histories" class="headerlink" title="refusing to merge unrelated histories"></a>refusing to merge unrelated histories</h4><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><ul>
<li>首先再github上创建一个仓库</li>
<li>在本地初始化一个仓库。</li>
<li>添加远程仓库</li>
<li>git push -u ge main</li>
<li>报错为<blockquote>
<p>$ git push -u ge main<br>To github.com:yishuilingbo/XYY-Game-Engine.git<br>! [rejected]        main -&gt; main (non-fast-forward)<br>error: failed to push some refs to ‘github.com:yishuilingbo/XYY-Game-Engine.git’<br>hint: Updates were rejected because the tip of your current branch is behind<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.</p>
</blockquote>
</li>
</ul>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul>
<li>本地仓库和远程仓库实际上是独立的两个仓库。假如之前是直接clone的方式在本地建立起远程github仓库的克隆本地仓库就不会有这问题了。<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$git pull [库名] [分支名] --allow-unrelated-histories</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="接着解决冲突然后-push即可"><a href="#接着解决冲突然后-push即可" class="headerlink" title="接着解决冲突然后 push即可"></a>接着解决冲突然后 push即可</h4></li>
</ul>
<h2 id="多仓库-multiple-ssh-keys-on-one-computer"><a href="#多仓库-multiple-ssh-keys-on-one-computer" class="headerlink" title="多仓库 multiple ssh keys on one computer"></a>多仓库 multiple ssh keys on one computer</h2><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>生成ssh key ,并给生成的文件使用绝对路径特定地命名。</li>
<li>在 .ssh 目录下新建config文件，内容为<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#gittest</span><br><span class="line">Host gittest.github.com</span><br><span class="line">	HostName github.com</span><br><span class="line">	User git</span><br><span class="line">	IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_gittest</span><br><span class="line">	IdentitiesOnly yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#coebase</span><br><span class="line">Host codebase.github.com</span><br><span class="line">	HostName github.com</span><br><span class="line">	User git</span><br><span class="line">	IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_codebase</span><br><span class="line">	IdentitiesOnly yes</span><br><span class="line"></span><br><span class="line">#coebases</span><br><span class="line">Host blog.github.com</span><br><span class="line">	HostName github.com</span><br><span class="line">	User git</span><br><span class="line">	IdentityFile ~&#x2F;.ssh&#x2F;id_rsa_codebase</span><br><span class="line">	IdentitiesOnly yes</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>修改本地仓库地config中的url<br>eg:<br>gittest地config本来为<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url &#x3D; git@github.com:yishuilingbo&#x2F;gittest.git</span><br><span class="line">	fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br></pre></td></tr></table></figure>
修改为：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url &#x3D; git@gittest.github.com:yishuilingbo&#x2F;gittest.git</span><br><span class="line">	fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br></pre></td></tr></table></figure>
即添加上gittest.</li>
<li>在GitHub上的仓库中添加刚刚生成的deploy key</li>
</ol>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul>
<li>即对于不同的仓库使用不同的key,并且使用别名来区分不同的仓库。<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4></li>
<li><a href="https://gist.github.com/jexchan/2351996">https://gist.github.com/jexchan/2351996</a></li>
</ul>
]]></content>
      <categories>
        <category>使用</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>使用</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>cat2, cat3</category>
      </categories>
      <tags>
        <tag>hello_world</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的使用</title>
    <url>/2021/03/22/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo"></a>hello hexo</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul>
<li>安装git</li>
<li>安装Node.js<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2></li>
<li>window cmd 下输入 npm install -g hexo-cli<h2 id="使用hexo"><a href="#使用hexo" class="headerlink" title="使用hexo"></a>使用hexo</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">hexo init &lt;foldername&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="安装server与deployer"><a href="#安装server与deployer" class="headerlink" title="安装server与deployer"></a>安装server与deployer</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &#x2F;&#x2F;生成文章</span><br><span class="line">hexo c  &#x2F;&#x2F;清理</span><br><span class="line">hexo g  &#x2F;&#x2F;生成</span><br><span class="line">hexo s  &#x2F;&#x2F;启动本地服务</span><br><span class="line">hexo d  &#x2F;&#x2F;部署</span><br><span class="line">简单地使用为 hexo g -d</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="以上就是hexo的基础使用了。"><a href="#以上就是hexo的基础使用了。" class="headerlink" title="以上就是hexo的基础使用了。"></a>以上就是hexo的基础使用了。</h4><hr>
<h2 id="配置github-page"><a href="#配置github-page" class="headerlink" title="配置github page"></a>配置github page</h2><ul>
<li>建立一个GitHub仓库</li>
<li>将仓库配置为GitHub page</li>
<li>输入自己的域名 cuimouren.cn</li>
</ul>
<h2 id="解析自己的域名到GitHub-page"><a href="#解析自己的域名到GitHub-page" class="headerlink" title="解析自己的域名到GitHub page"></a>解析自己的域名到GitHub page</h2><h4 id="添加如下的域名解析记录"><a href="#添加如下的域名解析记录" class="headerlink" title="添加如下的域名解析记录"></a>添加如下的域名解析记录</h4><ul>
<li>主机记录： @</li>
<li>记录类型： CNAME</li>
<li>线路类型： 默认</li>
<li>记录值：     yishuilingbo.github.io  即GitHub page分配的网址</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr>
<h4 id="到此就完成了框架性的工作"><a href="#到此就完成了框架性的工作" class="headerlink" title="到此就完成了框架性的工作"></a>到此就完成了框架性的工作</h4><hr>
<h2 id="‘菜’的坑"><a href="#‘菜’的坑" class="headerlink" title="‘菜’的坑"></a>‘<strong>菜’的坑</strong></h2><h3 id="注意得在cmd环境下进行操作，powershell不行。"><a href="#注意得在cmd环境下进行操作，powershell不行。" class="headerlink" title="注意得在cmd环境下进行操作，powershell不行。"></a>注意得在cmd环境下进行操作，powershell不行。</h3><h3 id="Hexo在部署到Github后CNAME文件会消失或改变的解决方法"><a href="#Hexo在部署到Github后CNAME文件会消失或改变的解决方法" class="headerlink" title="Hexo在部署到Github后CNAME文件会消失或改变的解决方法"></a>Hexo在部署到Github后CNAME文件会消失或改变的解决方法</h3><h4 id="问题经过"><a href="#问题经过" class="headerlink" title="问题经过:"></a>问题经过:</h4><ul>
<li><p>在转移网站后,在 Github网页上修改CNAME文件中指向的域名后,重新部署Hexo时发现CNAME指向的域名是之前的网站,而没有编程修改后的域名.排查后发现:</p>
</li>
<li><p>Hexo在Github上部署后,如果配置了一个自定义域名时,会自动在项目仓库根目录想新建一个CNAME文件,但是重新部署后CNAME会消失或者变成修改之前的状态,导致需要再次手动修改.</p>
</li>
</ul>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法:"></a>解决方法:</h4><ul>
<li>直接修改 hexo目录 下 source 文件夹内的CNAME文件的内容,用编辑器打开,第一行输入需要配置的域名.这样在部署的时候CNAME 文件会自动部署到Github.不用再次手动修改.</li>
</ul>
<h3 id="注意配置git的username-与-email"><a href="#注意配置git的username-与-email" class="headerlink" title="注意配置git的username 与 email"></a>注意配置git的username 与 email</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;name&quot;</span><br><span class="line">git config --global user.email &quot;email@gmail.com&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="git网络问题"><a href="#git网络问题" class="headerlink" title="git网络问题"></a>git网络问题</h3><h4 id="设置git的代理"><a href="#设置git的代理" class="headerlink" title="设置git的代理"></a>设置git的代理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="deployer-not-found"><a href="#deployer-not-found" class="headerlink" title="deployer not found"></a>deployer not found</h3><ul>
<li>npm install hexo-deployer-git –save</li>
</ul>
<h3 id="permission-denied"><a href="#permission-denied" class="headerlink" title="permission denied"></a>permission denied</h3><ul>
<li>hexo 只支持单用户凭证，所以需要去控制面板中更改git:<a href="https://github.com/">https://github.com</a> 的用户凭证即可。使用哪一个github用户时就更新成哪一个。</li>
</ul>
]]></content>
      <categories>
        <category>cat1</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux base</title>
    <url>/2021/04/19/linux-base/</url>
    <content><![CDATA[<h1 id="linux-base"><a href="#linux-base" class="headerlink" title="linux base"></a>linux base</h1><h4 id="centos6-定时重启"><a href="#centos6-定时重启" class="headerlink" title="centos6 定时重启"></a>centos6 定时重启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;crontab</span><br><span class="line">按照提示添加 </span><br><span class="line">00 06 * * * root reboot</span><br><span class="line">载入内存</span><br><span class="line">crontab &#x2F;etc&#x2F;crontab</span><br><span class="line">启动服务并设置开机自启动</span><br><span class="line">systemctl enable crond.service</span><br><span class="line">systemctl restart crond.service</span><br><span class="line">查看定时配置</span><br><span class="line">crontab -l</span><br><span class="line">查看系统启动记录</span><br><span class="line">last reboot</span><br><span class="line">who -b</span><br></pre></td></tr></table></figure>
<h4 id="ubuntu-设置root-ssh-登录"><a href="#ubuntu-设置root-ssh-登录" class="headerlink" title="ubuntu 设置root ssh 登录"></a>ubuntu 设置root ssh 登录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重置 root 的密码</span><br><span class="line">sudo passwd root</span><br><span class="line">su</span><br><span class="line">vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config </span><br><span class="line">将 PermitRootLogin 参数修改为 yes。</span><br><span class="line">将 PasswordAuthentication 参数修改为 yes。</span><br><span class="line">若 sshd_config 配置文件中无此配置项，则添加 PasswordAuthentication yes 项即可。</span><br><span class="line">service ssh restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux journey</title>
    <url>/2021/04/21/linux-journey/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>nonetag</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown的使用方法</title>
    <url>/2021/03/22/markdown%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="markdown-的使用方法"><a href="#markdown-的使用方法" class="headerlink" title="markdown 的使用方法"></a>markdown 的使用方法</h1><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><blockquote>
<p>我们使用几个#就代表使用几级标题。在文本的下方添加任意数量的“====”代表一级标题，“—”代表二级标题。 </p>
<blockquote>
<p>sad</p>
</blockquote>
<ul>
<li>我们使用几个#就代表使用几级标题。在文本的下方添加任意数量的“====”代表一级标题，“—”代表二级标题。 </li>
</ul>
</blockquote>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><h4 id="斜体-粗体"><a href="#斜体-粗体" class="headerlink" title="斜体 粗体"></a>斜体 粗体</h4><ol>
<li>一</li>
<li>二<ol>
<li>一</li>
<li>二</li>
<li>三</li>
</ol>
</li>
<li>三</li>
</ol>
<ul>
<li><p>一</p>
</li>
<li><p>二</p>
</li>
<li><p>the <code>asd</code>.</p>
</li>
</ul>
<p><img src="/img/love.png" alt="poicture"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">[</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


<ul>
<li><a href="https://www.baidu.com/">https://www.baidu.com</a></li>
<li><a href="mailto:&#x79;&#x61;&#x6f;&#49;&#57;&#55;&#x30;&#x30;&#57;&#57;&#x35;&#x34;&#x30;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#111;&#109;">&#x79;&#x61;&#x6f;&#49;&#57;&#55;&#x30;&#x30;&#57;&#57;&#x35;&#x34;&#x30;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#111;&#109;</a></li>
</ul>
]]></content>
      <categories>
        <category>cat1</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>proxy trojan</title>
    <url>/2021/04/21/proxy-trojan/</url>
    <content><![CDATA[<h1 id="proxy-trojan"><a href="#proxy-trojan" class="headerlink" title="proxy trojan"></a>proxy trojan</h1><h4 id="trojan-server-服务端"><a href="#trojan-server-服务端" class="headerlink" title="trojan server 服务端"></a>trojan server 服务端</h4><ul>
<li>傻瓜式一键部署，（等我Linux学有所成了再自己一步一步地配置）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -O https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;atrandys&#x2F;trojan&#x2F;master&#x2F;trojan_mult.sh &amp;&amp; chmod +x trojan_mult.sh &amp;&amp; .&#x2F;trojan_mult.sh</span><br></pre></td></tr></table></figure></li>
<li>按照提示进行部署。需要手动输入域名和密码。</li>
<li>结果会输出一个如下的配置，config。保存这个配置(config.json)，待会要用。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;run_type&quot;: &quot;client&quot;,</span><br><span class="line">    &quot;local_addr&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;: 1080,</span><br><span class="line">    &quot;remote_addr&quot;: &quot;domain&quot;,</span><br><span class="line">    &quot;remote_port&quot;: 443,</span><br><span class="line">    &quot;password&quot;: [</span><br><span class="line">        &quot;password&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;log_level&quot;: 1,</span><br><span class="line">    &quot;ssl&quot;: &#123;</span><br><span class="line">        &quot;verify&quot;: true,</span><br><span class="line">        &quot;verify_hostname&quot;: true,</span><br><span class="line">        &quot;cert&quot;: &quot;&quot;,</span><br><span class="line">        &quot;cipher_tls13&quot;:&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;,</span><br><span class="line">        &quot;sni&quot;: &quot;&quot;,</span><br><span class="line">        &quot;alpn&quot;: [</span><br><span class="line">            &quot;h2&quot;,</span><br><span class="line">            &quot;http&#x2F;1.1&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;reuse_session&quot;: true,</span><br><span class="line">        &quot;session_ticket&quot;: false,</span><br><span class="line">        &quot;curves&quot;: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tcp&quot;: &#123;</span><br><span class="line">        &quot;no_delay&quot;: true,</span><br><span class="line">        &quot;keep_alive&quot;: true,</span><br><span class="line">        &quot;fast_open&quot;: false,</span><br><span class="line">        &quot;fast_open_qlen&quot;: 20</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="trojan-client-客户端"><a href="#trojan-client-客户端" class="headerlink" title="trojan client 客户端"></a>trojan client 客户端</h4><h6 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h6></li>
<li>windows 下推荐使用clash。</li>
<li>github 上下载 clash for windows,安装。</li>
<li>clash 配置示例如下。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port: 7890</span><br><span class="line">socks-port: 7891</span><br><span class="line">redir-port: 7892</span><br><span class="line">allow-lan: false</span><br><span class="line">mode: rule</span><br><span class="line">log-level: info</span><br><span class="line">external-controller: 127.0.0.1:9090</span><br><span class="line">proxies:</span><br><span class="line">  - type: trojan</span><br><span class="line">    name: 0.trojan</span><br><span class="line">    server: server&#39;ip</span><br><span class="line">    port: 443</span><br><span class="line">    password: 密码</span><br><span class="line">    sni: download.windowsupdate.com</span><br><span class="line">    skip-cert-verify: true</span><br><span class="line"></span><br><span class="line">    url: http:&#x2F;&#x2F;www.gstatic.com&#x2F;generate_204</span><br><span class="line">    interval: 300</span><br></pre></td></tr></table></figure>
<h6 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h6></li>
<li>以Ubuntu为例</li>
<li>下载Trojan<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;src</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;trojan-gfw&#x2F;trojan&#x2F;releases&#x2F;download&#x2F;v1.16.0&#x2F;trojan-1.16.0-linux-amd64.tar.xz</span><br><span class="line">tar xvf trojan-1.16.0-linux-amd64.tar.xz</span><br><span class="line">cd &#x2F;usr&#x2F;src&#x2F;trojan</span><br><span class="line">vi config.json</span><br></pre></td></tr></table></figure></li>
<li>将上面server生成的config复制到这里。即可。</li>
<li>为Trojan注册服务。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;trojan.service &lt;&lt;-EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;trojan</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">PIDFile&#x3D;&#x2F;usr&#x2F;src&#x2F;trojan&#x2F;trojan.pid</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;src&#x2F;trojan&#x2F;trojan -c &#x2F;usr&#x2F;src&#x2F;trojan&#x2F;config.json -l &#x2F;usr&#x2F;src&#x2F;trojan&#x2F;trojan.log</span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -HUP \$MAINPID</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartSec&#x3D;1s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li>启动Trojan<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start trojan</span><br></pre></td></tr></table></figure></li>
<li>检查是否启动成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux | grep trojan | grep -v grep</span><br></pre></td></tr></table></figure>
<blockquote>
<p>看到有类似 /usr/src/trojan/trojan 的内容展示，即表示trojan正在运行<br>如果未启动成功，通过这个命令查看日志： cat /usr/src/trojan/trojan.log<br>还可以执行 curl ip.sb –socks5 127.0.0.1:1080, 查看结果是否为Trojan代理的IP</p>
</blockquote>
</li>
<li>设置开机启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable trojan</span><br></pre></td></tr></table></figure></li>
<li>命令行使用Trojan代理，免去使用镜像却又找不到之苦。<blockquote>
<p>安装配置proxychains，全局翻墙通过proxychains实现，即将任何程序和Trojan的proxy建立链接，原理和浏览器的代理相似。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install proxychains</span><br><span class="line">vi &#x2F;etc&#x2F;proxychains.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在最后的ProxyList里注释默认的socks代理： socks4 前增加#表示注释<br>在最后的ProxyList里加入Trojan的代理设置： socks5 127.0.0.1 1080<br>测试本地IP: curl -4 ip.sb，将显示自己的IP<br>测试代理IP: proxychains curl -4 ip.sb，将显示Trojan代理的IP<br>后续使用的命令行需要代理时，只需要在前面加上 proxychains 即可<br>如 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains wget https:&#x2F;&#x2F;github.com&#x2F;cdr&#x2F;code-server&#x2F;releases&#x2F;download&#x2F;v3.9.3&#x2F;code-server-3.9.3-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<blockquote>
<p>hahahaha,，没错，我要开始配置code-server了。见下一讲 code-server.</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>proxy</tag>
        <tag>trojan</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 CentOS 搭建 Discuz 论坛</title>
    <url>/2021/04/19/%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-Discuz-%E8%AE%BA%E5%9D%9B/</url>
    <content><![CDATA[<h1 id="基于-CentOS-搭建-Discuz-论坛"><a href="#基于-CentOS-搭建-Discuz-论坛" class="headerlink" title="基于 CentOS 搭建 Discuz 论坛"></a>基于 CentOS 搭建 Discuz 论坛</h1><h4 id="准备LAMP环境"><a href="#准备LAMP环境" class="headerlink" title="准备LAMP环境"></a>准备LAMP环境</h4><ul>
<li>LAMP 是 Linux、Apache、MySQL 和 PHP 的缩写，是 Discuz 论坛系统依赖的基础运行环境。</li>
<li>MySQL<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-server </span><br><span class="line">service mysqld restart</span><br><span class="line">设置MySQL的账户和密码</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password &#39;mypassword&#39; </span><br><span class="line">设置开机自启动</span><br><span class="line">chkconfig mysqld on</span><br></pre></td></tr></table></figure></li>
<li>apache<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install httpd</span><br><span class="line">service httpd restart</span><br><span class="line">chkconfig httpd on</span><br></pre></td></tr></table></figure></li>
<li>php<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install php php-fpm -php-mysql -y</span><br><span class="line">service php-fpm restart</span><br><span class="line">查看php-fpm 进程监听的窗口</span><br><span class="line">netstat -nlpt |grep php-fpm</span><br><span class="line">chkconfig php-fpm on</span><br></pre></td></tr></table></figure></li>
<li>discuz<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载</span><br><span class="line">wget https:&#x2F;&#x2F;labs-1253675457.cos.ap-guangzhou.myqcloud.com&#x2F;Discuz_X3.2_SC_UTF8.zip</span><br><span class="line">unzip Discuz_X3.2_SC_UTF8.zip</span><br><span class="line">由于PHP默认访问 &#x2F;var&#x2F;www&#x2F;html&#x2F; 文件夹，所以我们需要把upload文件夹里的文件都复制到 &#x2F;var&#x2F;www&#x2F;html&#x2F; 文件夹</span><br><span class="line">cp -r upload&#x2F;* &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class="line">给 &#x2F;var&#x2F;www&#x2F;html 目录及其子目录赋予权限</span><br><span class="line">chmod -R 777 &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">service httpd restart</span><br></pre></td></tr></table></figure></li>
<li>域名</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>discuz</tag>
      </tags>
  </entry>
  <entry>
    <title>零碎的技术</title>
    <url>/2021/04/21/%E9%9B%B6%E7%A2%8E%E7%9A%84%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="零碎的技术"><a href="#零碎的技术" class="headerlink" title="零碎的技术"></a>零碎的技术</h1><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><blockquote>
<p>记录类型:<br>A记录：将域名指向一个IPv4地址（例如：10.10.10.10），需要增加A记录<br>CNAME记录：如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录<br>主机记录：<br>www ：将域名解析为<a href="http://www.example.com,填写www;/">www.example.com，填写www；</a><br>@ ：将域名解析为example.com（不带www），填写@或者不填写；</p>
</blockquote>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>技术，域名</tag>
      </tags>
  </entry>
</search>
